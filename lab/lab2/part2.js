/* =====================
# Lab 2, Part 2 â€” Underscore Each Function

## Introduction

Up to this point, we have used Javascript's for loop to loop through data. Underscore's _.each function provides us with an easy to read, simple way to accomplish the same goal.

## Task

Find two previous labs that use for loops. Rewrite these labs to use _.each.

## Syntax
You can see an example of how to use ._each in the underscore documentation: http://underscorejs.org/#each and in the code below.

var myArray = [1, 10, 100, 1000];

_.each(myArray, function(value, key, list) {
  console.log(value, key, list);
});
===================== */

// ================================BEGIN EXAMPLE 1

// INSTEAD OF >>>
// for (var i = 1; i<=100; i ++){
//   if(i%15===0){
//     console.log("FizzBuzz");
//     }
//
//   else if(i%5===0){
//     console.log("Buzz");
//     }
//
//   else if(i%3===0){
//       console.log("Fizz");
//     }
//
//   else {
//     console.log(i)}
//   }
// THIS INSTEAD >>
var myArray = _.range(101);

_.each(myArray,function(item) {
  if(item%15===0){
    console.log("FizzBuzz");
  }
  else if (item%5===0) {
    console.log("Buzz");
  }
  else if(item%3===0) {
    console.log("Fizz");
  }
});
// ================================END EXAMPLE 1

// ================================BEGIN EXAMPLE 2

// Project Euler Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

// I didn't do this one originally,but I thought it would be good Practice
// underscore to try it now.


var myArray = _.range(1000);
var divFifteen = [];

_.each(myArray,function(i) {
  if(i%15===0) {
    divFifteen.push(i); }
  });

var sum = divFifteen.reduce(function(a,b) {
  return a + b;
});

console.log(sumAll);

// ================================END EXAMPLE 2

// ================================BEGIN EXAMPLE 3
// PROJECT EULER PROBLEM 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
// STILL WORKING ON THIS ONE***
//
// var myArray = _.range(20);
// var newArray = [];
//
// var fibonacci = _.each(myArray,function fib(i) {
//   if(i<2) newArray.push(1);
//   else newArray.push(fib(i-1) + fib(i-2));
// });

// ================================END EXAMPLE 3
